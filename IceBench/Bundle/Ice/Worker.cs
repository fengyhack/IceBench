//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.8
//
// <auto-generated>
//
// Generated from file `Worker.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Bundle
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
    public enum OperationType
    {
        ShortMessage,
        LongMessage,
        SmallFile,
        BigFile,
        LongTime
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
    public sealed class OperationTypeHelper
    {
        public static void write(global::Ice.OutputStream ostr, OperationType v)
        {
            ostr.writeEnum((int)v, 4);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
        public static OperationType read(global::Ice.InputStream istr)
        {
            OperationType v;
            v = (OperationType)istr.readEnum(4);
            return v;
        }
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [global::System.Serializable]
    public partial class OperationResult : global::System.ICloneable
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
        public string Message;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
        public byte[] Data;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
        public OperationResult()
        {
            this.Message = "";
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
        public OperationResult(string Message, byte[] Data)
        {
            this.Message = Message;
            this.Data = Data;
            ice_initialize();
        }

        #endregion

        #region ICloneable members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::Bundle::OperationResult");
            global::IceInternal.HashUtil.hashAdd(ref h_, Message);
            global::IceInternal.HashUtil.hashAdd(ref h_, Data);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
        public override bool Equals(object other)
        {
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            if(other == null)
            {
                return false;
            }
            if(GetType() != other.GetType())
            {
                return false;
            }
            OperationResult o = (OperationResult)other;
            if(this.Message == null)
            {
                if(o.Message != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.Message.Equals(o.Message))
                {
                    return false;
                }
            }
            if(this.Data == null)
            {
                if(o.Data != null)
                {
                    return false;
                }
            }
            else
            {
                if(!IceUtilInternal.Arrays.Equals(this.Data, o.Data))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
        public static bool operator==(OperationResult lhs, OperationResult rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
        public static bool operator!=(OperationResult lhs, OperationResult rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeString(this.Message);
            RawBytesHelper.write(ostr, this.Data);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.Message = istr.readString();
            this.Data = RawBytesHelper.read(istr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
        public static void ice_write(global::Ice.OutputStream ostr, OperationResult v)
        {
            if(v == null)
            {
                _nullMarshalValue.ice_writeMembers(ostr);
            }
            else
            {
                v.ice_writeMembers(ostr);
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
        public static OperationResult ice_read(global::Ice.InputStream istr)
        {
            var v = new OperationResult();
            v.ice_readMembers(istr);
            return v;
        }

        private static readonly OperationResult _nullMarshalValue = new OperationResult();

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Serializable]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class OperationException : global::Ice.UserException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
        public string Operation;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
        private void _initDM()
        {
            this.Operation = "";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
        public OperationException()
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
        public OperationException(global::System.Exception ex) : base(ex)
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
        public OperationException(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
            this.Operation = info.GetString("Operation");
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
        private void _initDM(string Operation)
        {
            this.Operation = Operation;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
        public OperationException(string Operation)
        {
            _initDM(Operation);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
        public OperationException(string Operation, global::System.Exception ex) : base(ex)
        {
            _initDM(Operation);
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
        public override string ice_id()
        {
            return "::Bundle::OperationException";
        }

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::Bundle::OperationException");
            global::IceInternal.HashUtil.hashAdd(ref h_, Operation);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
        public override bool Equals(object other)
        {
            if(other == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            OperationException o = other as OperationException;
            if(o == null)
            {
                return false;
            }
            if(this.Operation == null)
            {
                if(o.Operation != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.Operation.Equals(o.Operation))
                {
                    return false;
                }
            }
            return true;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
        public override void GetObjectData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context)
        {
            info.AddValue("Operation", this.Operation == null ? "" : this.Operation);

            base.GetObjectData(info, context);
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
        public static bool operator==(OperationException lhs, OperationException rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
        public static bool operator!=(OperationException lhs, OperationException rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Bundle::OperationException", -1, true);
            ostr_.writeString(Operation);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            Operation = istr_.readString();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Worker : global::Ice.Object, WorkerOperations_
    {
    }
}

namespace Bundle
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
    public delegate void Callback_Worker_PerformAction(OperationResult ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
    public delegate void Callback_Worker_PerformActionEx(OperationResult ret);
}

namespace Bundle
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
    public interface WorkerPrx : global::Ice.ObjectPrx
    {
        OperationResult PerformAction(OperationType operation, int contentSizeMB, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<OperationResult> PerformActionAsync(OperationType operation, int contentSizeMB, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Worker_PerformAction> begin_PerformAction(OperationType operation, int contentSizeMB, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_PerformAction(OperationType operation, int contentSizeMB, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_PerformAction(OperationType operation, int contentSizeMB, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        OperationResult end_PerformAction(global::Ice.AsyncResult asyncResult);

        OperationResult PerformActionEx(OperationType operation, int contentSizeMB, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<OperationResult> PerformActionExAsync(OperationType operation, int contentSizeMB, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Worker_PerformActionEx> begin_PerformActionEx(OperationType operation, int contentSizeMB, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_PerformActionEx(OperationType operation, int contentSizeMB, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_PerformActionEx(OperationType operation, int contentSizeMB, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        OperationResult end_PerformActionEx(global::Ice.AsyncResult asyncResult);
    }
}

namespace Bundle
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
    public interface WorkerOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
        OperationResult PerformAction(OperationType operation, int contentSizeMB, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
        global::System.Threading.Tasks.Task<OperationResult> PerformActionExAsync(OperationType operation, int contentSizeMB, global::Ice.Current current = null);
    }
}

namespace Bundle
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
    public sealed class RawBytesHelper
    {
        public static void write(global::Ice.OutputStream ostr, byte[] v)
        {
            ostr.writeByteSeq(v);
        }

        public static byte[] read(global::Ice.InputStream istr)
        {
            byte[] v;
            v = istr.readByteSeq();
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
    [global::System.Serializable]
    public sealed class WorkerPrxHelper : global::Ice.ObjectPrxHelperBase, WorkerPrx
    {
        public WorkerPrxHelper()
        {
        }

        public WorkerPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public OperationResult PerformAction(OperationType operation, int contentSizeMB, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_PerformActionAsync(operation, contentSizeMB, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public OperationResult PerformActionEx(OperationType operation, int contentSizeMB, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_PerformActionExAsync(operation, contentSizeMB, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<OperationResult> PerformActionAsync(OperationType operation, int contentSizeMB, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_PerformActionAsync(operation, contentSizeMB, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<OperationResult> _iceI_PerformActionAsync(OperationType iceP_operation, int iceP_contentSizeMB, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_PerformAction_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<OperationResult>(progress, cancel);
            _iceI_PerformAction(iceP_operation, iceP_contentSizeMB, context, synchronous, completed);
            return completed.Task;
        }

        private const string _PerformAction_name = "PerformAction";

        private void _iceI_PerformAction(OperationType iceP_operation, int iceP_contentSizeMB, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<OperationResult>(completed);
            outAsync.invoke(
                _PerformAction_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeEnum((int)iceP_operation, 4);
                    ostr.writeInt(iceP_contentSizeMB);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(OperationException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    OperationResult ret = null;
                    ret = OperationResult.ice_read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<OperationResult> PerformActionExAsync(OperationType operation, int contentSizeMB, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_PerformActionExAsync(operation, contentSizeMB, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<OperationResult> _iceI_PerformActionExAsync(OperationType iceP_operation, int iceP_contentSizeMB, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_PerformActionEx_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<OperationResult>(progress, cancel);
            _iceI_PerformActionEx(iceP_operation, iceP_contentSizeMB, context, synchronous, completed);
            return completed.Task;
        }

        private const string _PerformActionEx_name = "PerformActionEx";

        private void _iceI_PerformActionEx(OperationType iceP_operation, int iceP_contentSizeMB, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<OperationResult>(completed);
            outAsync.invoke(
                _PerformActionEx_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeEnum((int)iceP_operation, 4);
                    ostr.writeInt(iceP_contentSizeMB);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    OperationResult ret = null;
                    ret = OperationResult.ice_read(istr);
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Worker_PerformAction> begin_PerformAction(OperationType operation, int contentSizeMB, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_PerformAction(operation, contentSizeMB, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_PerformAction(OperationType operation, int contentSizeMB, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_PerformAction(operation, contentSizeMB, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_PerformAction(OperationType operation, int contentSizeMB, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_PerformAction(operation, contentSizeMB, context, callback, cookie, false);
        }

        public OperationResult end_PerformAction(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _PerformAction_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<OperationResult>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Worker_PerformAction> begin_PerformAction(OperationType iceP_operation, int iceP_contentSizeMB, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_PerformAction_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Worker_PerformAction, OperationResult>(
                (Callback_Worker_PerformAction cb, OperationResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _PerformAction_name, cookie, completedCallback);
            _iceI_PerformAction(iceP_operation, iceP_contentSizeMB, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Worker_PerformActionEx> begin_PerformActionEx(OperationType operation, int contentSizeMB, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_PerformActionEx(operation, contentSizeMB, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_PerformActionEx(OperationType operation, int contentSizeMB, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_PerformActionEx(operation, contentSizeMB, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_PerformActionEx(OperationType operation, int contentSizeMB, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_PerformActionEx(operation, contentSizeMB, context, callback, cookie, false);
        }

        public OperationResult end_PerformActionEx(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _PerformActionEx_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<OperationResult>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Worker_PerformActionEx> begin_PerformActionEx(OperationType iceP_operation, int iceP_contentSizeMB, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_PerformActionEx_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Worker_PerformActionEx, OperationResult>(
                (Callback_Worker_PerformActionEx cb, OperationResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _PerformActionEx_name, cookie, completedCallback);
            _iceI_PerformActionEx(iceP_operation, iceP_contentSizeMB, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static WorkerPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            WorkerPrx r = b as WorkerPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                WorkerPrxHelper h = new WorkerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static WorkerPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            WorkerPrx r = b as WorkerPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                WorkerPrxHelper h = new WorkerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static WorkerPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    WorkerPrxHelper h = new WorkerPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static WorkerPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    WorkerPrxHelper h = new WorkerPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static WorkerPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            WorkerPrx r = b as WorkerPrx;
            if(r == null)
            {
                WorkerPrxHelper h = new WorkerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static WorkerPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            WorkerPrxHelper h = new WorkerPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Bundle::Worker",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, WorkerPrx v)
        {
            ostr.writeProxy(v);
        }

        public static WorkerPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                WorkerPrxHelper result = new WorkerPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Bundle
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.8")]
    public abstract class WorkerDisp_ : global::Ice.ObjectImpl, Worker
    {
        #region Slice operations

        public abstract OperationResult PerformAction(OperationType operation, int contentSizeMB, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<OperationResult> PerformActionExAsync(OperationType operation, int contentSizeMB, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Bundle::Worker",
            "::Ice::Object"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[0];
        }

        public static new string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_PerformAction(Worker obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            OperationType iceP_operation;
            int iceP_contentSizeMB;
            iceP_operation = (OperationType)istr.readEnum(4);
            iceP_contentSizeMB = istr.readInt();
            inS.endReadParams();
            var ret = obj.PerformAction(iceP_operation, iceP_contentSizeMB, current);
            var ostr = inS.startWriteParams();
            OperationResult.ice_write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_PerformActionEx(Worker obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            OperationType iceP_operation;
            int iceP_contentSizeMB;
            iceP_operation = (OperationType)istr.readEnum(4);
            iceP_contentSizeMB = istr.readInt();
            inS.endReadParams();
            return inS.setResultTask<OperationResult>(obj.PerformActionExAsync(iceP_operation, iceP_contentSizeMB, current),
                (ostr, ret) =>
                {
                    OperationResult.ice_write(ostr, ret);
                });
        }

        private static readonly string[] _all =
        {
            "PerformAction",
            "PerformActionEx",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_PerformAction(this, inS, current);
                }
                case 1:
                {
                    return iceD_PerformActionEx(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
